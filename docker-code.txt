project structure 

❯ tree -I node_modules -I venv/
.
├── README.md
├── api-gateway
│   ├── Dockerfile
│   ├── kong.conf
│   └── kong.yml
├── data-scraping
│   ├── README.md
│   ├── perfume-links.txt
│   ├── result.txt
│   └── run.py
├── database-population
│   └── run.py
├── docker-code.txt
├── docker-compose.yml
├── error-logs.txt
├── frontend
│   ├── Dockerfile
│   ├── README.md
│   ├── app
│   │   ├── change-password
│   │   │   └── page.tsx
│   │   ├── components
│   │   │   ├── AuthContext.tsx
│   │   │   ├── Content.tsx
│   │   │   ├── Footer.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── Navbar.tsx
│   │   │   ├── register-form.tsx
│   │   │   └── ui
│   │   │       ├── button.tsx
│   │   │       └── page.module.css
│   │   ├── fonts
│   │   │   ├── GeistMonoVF.woff
│   │   │   └── GeistVF.woff
│   │   ├── forget-password
│   │   │   └── page.tsx
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── main-page
│   │   │   └── page.tsx
│   │   ├── page.tsx
│   │   ├── quiz-page
│   │   │   └── page.tsx
│   │   ├── signin
│   │   │   └── page.tsx
│   │   └── signup
│   │       └── page.tsx
│   ├── next-env.d.ts
│   ├── next.config.mjs
│   ├── package.json
│   ├── postcss.config.mjs
│   ├── public
│   │   ├── images
│   │   │   └── background1.webp
│   │   └── logo
│   │       └── Logo.png
│   ├── tailwind.config.ts
│   ├── tsconfig.json
│   └── yarn.lock
├── localhost-1727896301997.log
├── project-code.txt
└── services
    ├── README.md
    ├── authentication-service
    │   ├── Dockerfile
    │   ├── README.md
    │   ├── app
    │   │   ├── __init__.py
    │   │   ├── models.py
    │   │   └── routes.py
    │   ├── requirements.txt
    │   └── run.py
    ├── forum-service
    │   ├── README.md
    │   ├── app
    │   │   ├── __init__.py
    │   │   ├── models.py
    │   │   └── routes.py
    │   └── run.py
    ├── product-service
    │   ├── Dockerfile
    │   ├── README.md
    │   ├── app
    │   │   ├── __init__.py
    │   │   ├── models.py
    │   │   └── routes.py
    │   ├── requirements.txt
    │   └── run.py
    ├── quiz-service
    │   ├── README.md
    │   ├── app
    │   │   ├── __init__.py
    │   │   └── routes.py
    │   ├── requirements.txt
    │   └── run.py
    └── user-service
        ├── Dockerfile
        ├── app
        │   ├── __init__.py
        │   ├── __pycache__
        │   │   ├── __init__.cpython-312.pyc
        │   │   ├── models.cpython-312.pyc
        │   │   └── routes.cpython-312.pyc
        │   ├── models.py
        │   └── routes.py
        ├── migrations
        │   ├── README
        │   ├── __pycache__
        │   │   └── env.cpython-312.pyc
        │   ├── alembic.ini
        │   ├── env.py
        │   └── script.py.mako
        ├── requirements.txt
        ├── routes-description.txt
        ├── run.py
        └── test_endpoints_userservice.sh

32 directories, 85 files

docker-compose.yml:

services:
  user-service:
    build: ./services/user-service
    ports:
      - "5001:5000"
    depends_on:
      - db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}

  authentication-service:
    build: ./services/authentication-service/
    ports:
      - "5002:5000"
    depends_on:
      - db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
  #
  # product-service:
  #   build: ./services/product-service/
  #   ports:
  #     - "5003:5000"
  #   depends_on:
  #     - db
  #   environment:
  #     - DATABASE_URL=${DATABASE_URL}

  api-gateway:
    build: ./api-gateway/
    ports:
      - "8000:8000"
      - "8443:8443"
    depends_on:
      - user-service
      - authentication-service
    volumes:
      - ./api-gateway/kong.yml:/app/kong.yml

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"

volumes:
  postgres_data:





# frontend/Dockerfile
FROM node:18

WORKDIR /app

COPY package*.json yarn.lock ./

RUN yarn install

COPY . .

EXPOSE 3000

CMD ["yarn", "dev"]



# api-gateway/Dockerfile
FROM kong:latest

# COPY Configuration file into Dockfer
COPY kong.yml /app/kong.yml

# Turn off Kong Database 
ENV KONG_DATABASE=off

# create Kong Declarative Configuration with Docker
ENV KONG_DECLARATIVE_CONFIG=/app/kong.yml

CMD ["kong", "docker-start"]



# user-service/Dockerfile
FROM python:3.9-slim

# Set the working directory 
WORKDIR /app 

# Copy the requirement.txt 
COPY requirements.txt ./ 
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code 
COPY . . 

# Expose the port that the Flask app will run on 
EXPOSE 5001

# Define the command to run the flask app 
CMD ["python3" , "run.py"]



# authentication-service/Dockerfile
FROM python:3.9-slim

WORKDIR /app 

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 5002

CMD ["python3" , "run.py"]

