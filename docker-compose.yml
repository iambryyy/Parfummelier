services:
  # NOTE: User Service
  user-service:
    build: ./services/user-service
    ports:
      - "5001:5000"
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      # - DATABASE_USER_URL=${DATABASE_USER_URL}
      - DATABASE_URL=${DATABASE_USER_URL}
      - SECRET_KEY=${SECRET_KEY}
    networks:
      - parfummelier-network

  # NOTE: Authentication Service
  authentication-service:
    build: ./services/authentication-service/
    ports:
      - "5002:5000"
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_USER_URL}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    networks:
      - parfummelier-network

  # NOTE: Product Service
  product-service:
    build: ./services/product-service/
    ports:
      - "5003:5000"
    depends_on:
      product_db:
        condition: service_healthy
    environment:
      # - DATABASE_PRODUCT_URL=${DATABASE_PRODUCT_URL}
      - DATABASE_URL=${DATABASE_PRODUCT_URL}
      - SECRET_KEY=${SECRET_KEY}
    networks:
      - parfummelier-network

  # NOTE: Api Gateway
  api-gateway:
    build: ./api-gateway/
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001" # Expose Admin API for local access
    depends_on:
      - user-service
      - authentication-service
    volumes:
      # - ./api-gateway/kong.yml:/app/kong.yml
      - ./api-gateway/kong.yml:/etc/kong/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    networks:
      - parfummelier-network

  # NOTE: USER_DB
  user_db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_USER_DB}
    ports:
      - "5432:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_USER_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - parfummelier-network

  # NOTE: PRODUCT_DB
  product_db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_PRODUCT_DB}
    ports:
      - "5433:5432" # Expose different port for product database
    volumes:
      - products_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PRODUCT_DB}",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - parfummelier-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    networks:
      - parfummelier-network
  # NOTE: Forum Service
  forum-service:
    build: ./services/forum-service
    ports:
      - "5004:5000" # Expose the forum service on port 5004
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/chat_database
      - SECRET_KEY=${SECRET_KEY}
    networks:
      - parfummelier-network

  # MongoDB service (for storing chat data)
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017" # Expose the default MongoDB port
    networks:
      - parfummelier-network

networks:
  parfummelier-network:
    driver: bridge

volumes:
  user_data:
  products_data:
  mongo_data:
    driver: local
